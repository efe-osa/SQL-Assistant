version: '3.8'

networks:
  sql-assistant-network:
    driver: bridge

volumes:
  sqlite_data:

services:
  backend:
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - .env.local
    depends_on:
      sqlite:
        condition: service_healthy
    networks:
      - sql-assistant-network

  sqlite:
    image: nouchka/sqlite3:latest
    container_name: sqlite-db
    ports:
      - "8080:8080"
    volumes:
      - ./sqlite_data/init-cars-db.sh:/db/init-cars-db.sh
      - ./sqlite_data/car_db.sql:/db/car_db.sql
      - sqlite_data:/db
    entrypoint: >
      sh -c "sqlite3 cars.db < /db/car_db.sql && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "sqlite3", "/db/cars.db", ".tables"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - sql-assistant-network

  sqlitebrowser:
    image: lscr.io/linuxserver/sqlitebrowser:latest
    container_name: sqlitebrowser
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - CUSTOM_HTTP_PORT=4000
      - CUSTOM_HTTPS_PORT=4001
    depends_on:
      sqlite:
        condition: service_healthy
    security_opt:
      - seccomp:unconfined #optional
    volumes:
      - sqlite_data:/db/cars.db
    ports:
      - 4000:4000
      - 4001:4001
    restart: unless-stopped
    networks:
      - sql-assistant-network
